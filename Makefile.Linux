# Compiler
CXX = g++

# Compiler flags
CXXFLAGS = -Wall -Wextra -std=c++23

# Linker flags
LDFLAGS = ''

# Source directory
SRC_DIR = src

# Recursive wildcard function:
rwildcard = $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) $(filter $(subst *,%,$2),$d))

# Find all .cpp files recursively in the source directory
SRC_FILES := $(call rwildcard, $(SRC_DIR)/, *.cpp)

# Find all header files recursively in the source directory
HEADER_FILES := $(call rwildcard, $(SRC_DIR)/, *.h) $(call rwildcard, $(SRC_DIR)/, *.hpp)

# Get unique directories that contain header files
INCLUDE_DIRS := $(sort $(dir $(HEADER_FILES)))

# Add -I prefix to each directory
INCLUDE_FLAGS = $(addprefix -I, $(INCLUDE_DIRS))

# Append include flags to CXXFLAGS
CXXFLAGS += $(INCLUDE_FLAGS)

# Object files (replace .cpp with .o)
OBJ_FILES = $(SRC_FILES:.cpp=.o)

# Executable name
TARGET = vote.exe

# Default target
all: $(TARGET)

# Link the object files to create the executable
$(TARGET): $(OBJ_FILES)
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LDFLAGS)

# Compile source files into object files
%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Clean build files (Unix command)
clean:
	rm -f $(OBJ_FILES) $(TARGET)

# Run the program after compiling
run: $(TARGET)
	./$(TARGET)

# Phony targets
.PHONY: all clean run
